;;; DIAG
;;;    Parameters:
;;;         id - the key for the diagnosis
;;;         diagnosis - the diangnosis
;;;    Purpose:
;;;         Stores the diagnosis in the DIAG-HT hash table
(defmacro diag (id &rest diagnosis)
	`( putp ',id DIAG-HT ',diagnosis )
)

;;; ISA
;;;    Parameters:
;;;         expr - The expression which acts as a key
;;;         type - The type the expression belongs to
;;;    Purpose:
;;;         Puts the expression in the ISA-HT hash table
(defmacro isa (expr &rest type)
	`( putp ',expr ISA-HT ',type )
)

;;; SYMPTOM
;;;    Parameters:
;;;         symptom - the symptom to put in the hash table
;;;    Purpose:
;;;         Puts the symptom in the SYMPTOM-HT hash table
;;;         Also adds any types associated with the symptom via
;;;         the ISA-HT as a symptom
(defmacro symptom (&rest symptom)
	`(if (getp ',symptom isa-ht)
		(PROG ()
			(putp (getp ',symptom isa-ht) symptom-HT 'T )
			(RETURN  (putp ',symptom symptom-HT 'T) )

		)
		( putp ',symptom symptom-HT 'T )
	)
)

;;; PRINTTREE
;;;    Parameters:
;;;         rootId - the root question to print from
;;;    Purpose:
;;;         Pretty prints the tree starting from the root supplied
(defun printTree (rootId)
	(terpri)
	(printWOP (getp rootId question-HT))
    (terpri)
	(printQChildren rootId 1)
)

;;; PRINTQCHILDREN
;;;    Parameters:
;;;         rootId - The question whose children to print
;;;         level - the depth in the tree
;;;    Purpose:
;;;         Prints the children of the question given
;;;         indenting based upon level to achieve pretty print
(defun printQChildren (rootId level)
	( setf left (car (getp rootId question-HT)) )
	(COND
		( (getp left question-HT)
			(PROG ()
				(indent level)
				(printWOP (list "Y:" left) )
                (printWOP  (getp left question-HT) )
                (terpri)
				(printQChildren left (1+ level))
			)
		)
		((getp left diag-HT)
			(PROG ()
				(indent level)
				(printWOP (list "Y:" left) )
                (printWOP (getp left diag-HT) )
                (terpri)
			)
		)
	)
	( setf right (cadr (getp rootId question-HT)) )
	(COND
		( (getp right question-HT)
			(PROG ()
				(indent level)
				(printWOP (list "N:" right) )
                (printWOP (getp right question-HT) )
                (terpri)
				(printQChildren right (1+ level))
			)
		)
		((getp right diag-HT)
			(PROG ()
				(indent level)
				(printWOP (list "N:" right) )
                (printWOP (getp right diag-HT))
                (terpri)
			)
		)
	)
)

;;; INDENT
;;;    Parameters:
;;;         level - the number of indents to print
;;;    Purpose:
;;;         Prints the given number of indents represented as 6 spaces
(defun indent (level)
	(do ( (spaces 0 (1+ spaces)) )
		((> spaces (* level 6)) NIL)
		(princ " ")
	)
)

;;; PRINTWOP
;;;    Parameters:
;;;       lis - the list of items to be printed
;;;    Purpose:
;;;       Prints the list supplied without the
;;;       surrounding parentheses
(defun printWOP(lis)
    (COND
        ( (ATOM lis) (PRINC lis))
        ( T (printList lis) )
    )
)

;;; PRINTLIST
;;;    Parameters:
;;;       lis - List of items to be printed
;;;    Purpose:
;;;       Prints the list supplied without surrounding
;;;       parentheses.  A list must be supplied
(defun printList(lis)

    (PRINC (CAR lis))
    (PRINC " ")

    (COND
        ( (CDR lis) (printList (CDR lis)) )
    )
)

;;; TRIAGE
;;;    Purpose:
;;;         Triages the patient given the symptoms
;;;         currently in the symptom hash table
;;;         and the questions and diagnosis given
(defun triage ()
    (setf currQuestion (getp ROOT question-HT) )
    (setf currKey ROOT)
    (terpri)
    (DO ( (currSymptom (cddr currQuestion) ) )
        ( (getp currKey DIAG-HT) (getp currKey diag-HT) )
        (COND
            ( (getp currSymptom symptom-HT)
                (PROG ()
                    (printWOP (list "ID:" currKey ":" currQuestion "? Y"))
                    (setf currKey (car currQuestion))
                )
            )
            ( T (PROG ()
                    (printWOP (list "ID:" currKey ":" currQuestion "? N"))
                    (setf currKey (cadr currQuestion))
                )
            )
        )
        (terpri)
        (setf currQuestion (getp currKey question-HT) )
        (COND
            ( currSymptom (setf currSymptom (cddr currQuestion)) )
        )
    )
)