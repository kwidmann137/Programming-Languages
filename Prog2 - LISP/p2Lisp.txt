(defun repeat(atm N)
    (cond
        ( (> N 0) (cons atm (repeat atm (- N 1))) )
    )
)

(defun duplicate(lis)
    (COND
        ( (NULL lis) NIL )
        ( (ATOM (CAR lis)) ( cons (CAR lis) ( cons  (CAR lis) (duplicate (CDR lis)) ) ) )
        ( T (cons (CAR lis) (duplicate (CDR lis))) )
    )
)

(defun duplicateN(lis N)
    (COND
        ((NULL lis) NIL)
        ((AND (ATOM lis) (ZEROP N)) NIL)
        ((AND (ATOM lis) (> N 0)) (cons lis (duplicateN  lis (- N 1))))
        ((AND (ATOM (CAR lis)) (> N 1)) (append (duplicateN (CAR lis) N) (duplicateN (CDR lis) N)))
        (T (cons (CAR lis) (duplicateN (CDR lis) N)))
    )
)

(defun duplicateDeep(lis)
    (COND
        ( (NULL lis) NIL )
        ( (ATOM (CAR lis)) ( cons (CAR lis) ( cons  (CAR lis) (duplicateDeep (CDR lis)) ) ) )
        ( T (cons (duplicateDeep (CAR lis)) (duplicateDeep (CDR lis))) )
    )
)

(defun printWOP(lis)
    (terpri)
    (COND
        ( (ATOM lis) (PRINC lis))
        ( T (printList lis) )
    )
    ; (terpri)
    T
)

(defun printList(lis)
    (PRINC (CAR lis))
    (PRINC " ")

    (COND
        ( ( NOT (NULL (CDR lis))) (printList (CDR lis)) )
    )
)

(defun evalEach(lis)
    (COND
        ( ( NOT (NULL (CDR lis))) (EVAL (CAR lis)) )
    )

    (COND
        ( (NULL (CDR lis)) (EVAL (CAR lis)) )
        ( T (evalEach (CDR lis)) )
    )
)