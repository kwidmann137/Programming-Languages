kyle@Kyle-Desktop:~/Desktop/UTSA/CS3723 - Programming Languages/Prog2 - LISP$ clisp
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> (load "p2Lisp.txt" :echo T :print T)
;; Loading file p2Lisp.txt ...
;;; REPEAT 
;;;    Parameters:
;;;       atm - the atom to be repeated
;;;       N - the number of times to repeat the atom
;;;    Purpose:
;;;       Returns a list containg the atom N times
(defun repeat(atm N)
    (cond
        ( (> N 0) (cons atm (repeat atm (- N 1))) )
    )
)
REPEAT


;;; DUPLICATE
;;;    Parameters:
;;;       lis - the list to be duplicated
;;;    Purpose:
;;;       Duplicates the top level atoms
;;;       in the supplied list
(defun duplicate(lis)
    (COND
        ( (NULL lis) NIL )
        ( (ATOM (CAR lis)) ( cons (CAR lis) ( cons  (CAR lis) (duplicate (CDR lis)))) )
        ( T (cons (CAR lis) (duplicate (CDR lis))) )
    )
)
DUPLICATE


;;; DUPLICATEN 
;;;    Parameters:
;;;       lis - the list to be duplicated
;;;       N - number of times to repeat top level atoms
;;;    Purpose:
;;;       Returns a list that repeats top 
;;;       level atoms in the list N times
(defun duplicateN(lis N)
    (COND
        ( (NULL lis) NIL )
        ( (AND (ATOM lis) (ZEROP N)) NIL )
        ( (AND (ATOM lis) (> N 0)) (cons lis (duplicateN  lis (- N 1))) )
        ( (AND (ATOM (CAR lis)) (> N 1)) (append (duplicateN (CAR lis) N) (duplicateN (CDR lis) N)) )
        ( T (cons (CAR lis) (duplicateN (CDR lis) N)) )
    )
)
DUPLICATEN


;;; DUPLICATEDEEP 
;;;    Parameters:
;;;       lis - the list of items to be duplicated
;;;    Purpose:
;;;       Recurses the list and any sub lists
;;;       repeating atoms at every level
(defun duplicateDeep(lis)
    (COND
        ( (NULL lis) NIL )
        ( (ATOM (CAR lis)) ( cons (CAR lis) 
            (cons  (CAR lis) (duplicateDeep (CDR lis)))) )
        ( T (cons (duplicateDeep (CAR lis)) (duplicateDeep (CDR lis))) )
    )
)
DUPLICATEDEEP


;;; PRINTWOP
;;;    Parameters:
;;;       lis - the list of items to be printed 
;;;    Purpose:
;;;       Prints the list supplied without the
;;;       surrounding parentheses
(defun printWOP(lis)
    (terpri)
    (COND
        ( (ATOM lis) (PRINC lis))
        ( T (printList lis) )
    )
    (terpri)
    T
)
PRINTWOP


;;; PRINTLIST
;;;    Parameters:
;;;       lis - List of items to be printed
;;;    Purpose:
;;;       Prints the list supplied without surrounding
;;;       parentheses.  A list must be supplied
(defun printList(lis)

    (PRINC (CAR lis))
    (PRINC " ")

    (COND
        ( ( NOT (NULL (CDR lis))) (printList (CDR lis)) )
    )
)
PRINTLIST


;;; EVALEACH
;;;    Parameters:
;;;       lis - The list to be evaluated
;;;    Purpose:
;;;       Evalutes each item in the list
(defun evalEach(lis)
    (COND
        ( (NOT (NULL (CDR lis))) (EVAL (CAR lis)) )
    )

    (COND
        ( (NULL (CDR lis)) (EVAL (CAR lis)) )
        ( T (evalEach (CDR lis)) )
    )
)
EVALEACH
;; Loaded file p2Lisp.txt
T
[2]> (load "p2LispRun.txt" :echo T :print T)
;; Loading file p2LispRun.txt ...
;;; ****** PGM2 RUN ******
(repeat 'A 5)
(A A A A A)


(duplicate ' (A B C))
(A A B B C C)
 
(duplicate ' (GUM (HAS BEEN) CHEWED))
(GUM GUM (HAS BEEN) CHEWED CHEWED)
 

(duplicateN  ' (A B C) 2)
(A A B B C C)
 
(duplicateN  ' (A B C) 3)
(A A A B B B C C C)
 
(duplicateN ' (GUM (HAS BEEN) CHEWED) 2)
(GUM GUM (HAS BEEN) CHEWED CHEWED)
 

(duplicateDeep  ' (A B C) )
(A A B B C C)
 
(duplicateDeep  ' (A (B D) E (F)) )
(A A (B B D D) E E (F F))
 
(duplicateDeep '(A (B (D E) (F G)) (H I)) )
(A A (B B (D D E E) (F F G G)) (H H I I))
 

(printWOP '(A B D))
A B D 
T


(printWOP '(A (B D) E F) )
A (B D) E F 
T


(printWOP NIL)
NIL
T


(printWOP 'Hello)
HELLO
T


(evalEach '( (setf A 5) (print 'hello) (print 'there) A))
HELLO 
THERE 
5
 

(evalEach '( (setf x 10 ) (setf A '(x y z)) (print A) (setf B (car A)) (set B (+ 5 x)) ))
(X Y Z) 
15

(print B)
X 
X

(print X)
15 
15

;; Loaded file p2LispRun.txt
T
[3]> 

