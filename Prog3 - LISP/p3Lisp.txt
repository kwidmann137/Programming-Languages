;;;DECREMENT
;;;    Parameters:
;;;       value - The variable to be decremented
;;;       decrement - Amount to decrement by
;;;    Purpose:
;;;       Subtract the decrement value from the value
(defmacro -= (value decrement)
    `(setf ,value ( - ,value ,decrement))
)


;;;SWITCH
;;;    Parameters:
;;;       value - Value to check for
;;;       sets - The set includes the (when (cond list) (body of statements))
;;;    Purpose:
;;;       Evalutes case, if the value is 
;;;       present in the case list, all 
;;;       subsequent statements will be executed
;;;    Example
;;;    (select value
;;;	        (when (A B)
;;;	           ( statement )
;;;			   ( ....      )
;;;	        )
;;;	        ...
;;;	        (default
;;;	           ( statement )
;;;	        )
;;;	   )
(defmacro SELECT (value &rest sets)
    (let ((g (gensym)) )
        `(do ((,g ' ,sets (cdr ,g)) )
            ( (NULL ,g) NIL )
            (if  
                (MEMSET ,value (cadar ,g))
                (return (evalEach (cddar ,g)))
                
            )
            (if
                (EQL 'DEFAULT (caar ,g))
                (return (evalEach (cdar ,g)))
            )
        )
    )
)

;;;MEMSET
;;;    Parameters:
;;;       lis - The list to be evaluated
;;;    Purpose:
;;;       Evalutes each item in the list
(defun MEMSET (atm L)
    (cond ( (NULL L) NIL )
          ( (EQL atm (CAR L)) T )
          ( T (MEMSET atm (CDR L)) )
    )
)

;;; EVALEACH
;;;    Parameters:
;;;       lis - The list to be evaluated
;;;    Purpose:
;;;       Evalutes each item in the list
(defun evalEach(lis)
    (COND
        ( (NOT (NULL (CDR lis))) (EVAL (CAR lis)) )
    )

    (COND
        ( (NULL (CDR lis)) (EVAL (CAR lis)) )
        ( T (evalEach (CDR lis)) )
    )
)